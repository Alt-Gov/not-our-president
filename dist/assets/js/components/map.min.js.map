{"version":3,"file":"map.min.js","names":["CFG","window","APP_CONFIG","mapboxgl","accessToken","mapboxToken","MAP_STYLE","mapStyle","COUNTY_ID_PROP","LOOKUP_URL","countyLookupUrl","allData","currentYear","COLORS","map","Map","container","style","center","zoom","minZoom","maxZoom","renderWorldCopies","async","getFipsList","year","data","String","Object","entries","filter","v","Number","isFinite","fips","val","padStart","value","buildColorExpression","fipsList","values","d","logValues","Math","log10","min","max","step","length","stops","i","push","console","log","toFixed","match","forEach","idx","floor","colors","legend","document","querySelector","innerHTML","logVals","lower","pow","upper","label","round","toLocaleString","sw","createElement","className","appendChild","updateLegend","buildLabelExpression","textMatch","addControl","NavigationControl","showCompass","ScaleControl","maxWidth","unit","addEventListener","resize","on","res","fetch","ok","Error","json","years","keys","sort","colorExpr","beforeId","getLayer","undefined","addLayer","id","type","source","paint","labelFilter","labelExpr","layout","minzoom","querySelectorAll","btn","setFilter","setPaintProperty","labelFilterNew","labelExprNew","setLayoutProperty","classList","toggle","dataset","updateYear"],"sources":["components/map.js"],"mappings":"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","ignoreList":[],"sourcesContent":["(function () {\n    const CFG = window.APP_CONFIG || {};\n    mapboxgl.accessToken = CFG.mapboxToken;\n    const MAP_STYLE = CFG.mapStyle || \"mapbox://styles/lynnstahl/cmhc3o1h5004q01qu3snzehqi\";\n    const SOURCE_ID = \"composite\";\n    const SOURCE_LAYER = \"albersusa\";\n    const COUNTY_ID_PROP = \"county_fips\";\n    const LOOKUP_URL = CFG.countyLookupUrl || \"snap_households_county_2020_2024.json\";\n\n    let allData = {};      // store all years from JSON\n    let currentYear = 2024;\n\n    const COLORS = [\"#e0938d\", \"#d06f68\", \"#bb4f47\", \"#a73f37\", \"#8e342e\"];\n\n    const map = new mapboxgl.Map({\n        container: \"map\",\n        style: MAP_STYLE,\n        center: [0, 0],\n        zoom: 5,\n        minZoom: 3,\n        maxZoom: 12,\n        renderWorldCopies: false\n    });\n\n\n    map.addControl(new mapboxgl.NavigationControl({ showCompass: false }), \"top-right\");\n    map.addControl(new mapboxgl.ScaleControl({ maxWidth: 120, unit: \"imperial\" }));\n    window.addEventListener(\"resize\", () => map.resize());\n\n    async function getFipsList(year) {\n        const data = allData[String(year)] || {};\n        return Object.entries(data)\n            .filter(([, v]) => Number.isFinite(v) && v > 0)\n            .map(([fips, val]) => ({ fips: fips.padStart(5, \"0\"), value: val }));\n    }\n\n    function updateLegend(values, colors) {\n        const legend = document.querySelector(\"#legend .swatches\");\n        if (!legend) return;\n        legend.innerHTML = \"\";\n\n        // Compute log10 stops\n        const logVals = values.map(v => Math.log10(v));\n        const min = Math.min(...logVals);\n        const max = Math.max(...logVals);\n        const step = (max - min) / (colors.length - 1);\n\n        for (let i = 0; i < colors.length; i++) {\n            const lower = Math.pow(10, min + step * i);\n            const upper = Math.pow(10, min + step * (i + 1));\n            const label =\n                i === colors.length - 1\n                    ? `>${Math.round(lower).toLocaleString()}`\n                    : `${Math.round(lower).toLocaleString()}–${Math.round(upper).toLocaleString()}`;\n\n            const sw = document.createElement(\"div\");\n            sw.className = \"swatch\";\n            sw.innerHTML = `\n      <div class=\"color-box\" style=\"background:${colors[i]}\"></div>\n      <div class=\"label\">${label}</div>`;\n            legend.appendChild(sw);\n        }\n    }\n\n\n    // Create a Mapbox expression for color based on log scale\n    function buildColorExpression(fipsList) {\n        const values = fipsList.map(d => d.value);\n        const logValues = values.map(v => Math.log10(v));\n        const min = Math.min(...logValues);\n        const max = Math.max(...logValues);\n        const step = (max - min) / (COLORS.length - 1);\n\n        const stops = [];\n        for (let i = 0; i < COLORS.length; i++) {\n            stops.push(min + step * i, COLORS[i]);\n        }\n\n        console.log(\"[SNAP] Color scale log10 min:\", min.toFixed(2), \"max:\", max.toFixed(2));\n\n        // Match expression: join county_fips → color by value\n        const match = [\"match\", [\"slice\", [\"concat\", [\"to-string\", [\"get\", COUNTY_ID_PROP]]], -5]];\n        fipsList.forEach(d => {\n            const v = Math.log10(d.value);\n            const idx = Math.min(\n                COLORS.length - 1,\n                Math.floor((v - min) / (step || 1e-6))\n            );\n            match.push(d.fips, COLORS[idx]);\n        });\n        match.push(\"#ccc\"); // fallback\n        updateLegend(values, COLORS);\n\n        return match;\n    }\n\n    function buildLabelExpression(fipsList) {\n        // Build a lookup: fips -> \"12,345\"\n        const textMatch = [\"match\", [\"slice\", [\"concat\", [\"to-string\", [\"get\", \"county_fips\"]]], -5]];\n        for (const d of fipsList) {\n            textMatch.push(d.fips, d.value.toLocaleString());\n        }\n        textMatch.push(\"\"); // fallback: no label\n        return textMatch;\n    }\n\n    async function updateYear(year) {\n        currentYear = year;\n        const fipsList = await getFipsList(year);\n        console.log(`[SNAP] Updating to FY${year}, ${fipsList.length} counties`);\n\n        const filter = [\n            \"in\",\n            [\"slice\", [\"concat\", [\"to-string\", [\"get\", COUNTY_ID_PROP]]], -5],\n            [\"literal\", fipsList.map(d => d.fips)]\n        ];\n\n        const colorExpr = buildColorExpression(fipsList);\n\n        if (map.getLayer(\"snap-counties-fill\")) {\n            map.setFilter(\"snap-counties-fill\", filter);\n            map.setPaintProperty(\"snap-counties-fill\", \"fill-color\", colorExpr);\n        }\n\n        const labelFilterNew = [\n            \"in\",\n            [\"slice\", [\"concat\", [\"to-string\", [\"get\", \"county_fips\"]]], -5],\n            [\"literal\", fipsList.map(d => d.fips)]\n        ];\n        const labelExprNew = buildLabelExpression(fipsList);\n\n        if (map.getLayer(\"snap-counties-labels\")) {\n            map.setFilter(\"snap-counties-labels\", labelFilterNew);\n            map.setLayoutProperty(\"snap-counties-labels\", \"text-field\", labelExprNew);\n        }\n\n        // update button states\n        document.querySelectorAll(\"#year-controls button\").forEach(btn => {\n            btn.classList.toggle(\"active\", btn.dataset.year === String(year));\n        });\n    }\n\n\n    map.on(\"load\", async () => {\n        const res = await fetch(LOOKUP_URL);\n        if (!res.ok) throw new Error(`Failed to fetch ${LOOKUP_URL}`);\n        allData = await res.json();\n        const years = Object.keys(allData).map(Number).sort();\n        currentYear = years[years.length - 1];\n\n        const fipsList = await getFipsList(currentYear);\n        const filter = [\n            \"in\",\n            [\"slice\", [\"concat\", [\"to-string\", [\"get\", COUNTY_ID_PROP]]], -5],\n            [\"literal\", fipsList.map(d => d.fips)]\n        ];\n\n        const colorExpr = buildColorExpression(fipsList);\n\n        const beforeId = map.getLayer(\"county-boundaries\") ? \"county-boundaries\" : undefined;\n        map.addLayer(\n            {\n                id: \"snap-counties-fill\",\n                type: \"fill\",\n                source: SOURCE_ID,\n                \"source-layer\": SOURCE_LAYER,\n                filter,\n                paint: { \"fill-color\": colorExpr, \"fill-opacity\": 0.85 }\n            },\n            beforeId\n        );\n\n        // ---- County labels on centroid points ----\n        const POINTS_SOURCE_LAYER = \"albersusa-points\"; // confirmed from your style\n        const labelFilter = [\n            \"in\",\n            [\"slice\", [\"concat\", [\"to-string\", [\"get\", \"county_fips\"]]], -5],\n            [\"literal\", fipsList.map(d => d.fips)]\n        ];\n        const labelExpr = buildLabelExpression(fipsList);\n\n        if (!map.getLayer(\"snap-counties-labels\")) {\n            map.addLayer({\n                id: \"snap-counties-labels\",\n                type: \"symbol\",\n                source: \"composite\",\n                \"source-layer\": POINTS_SOURCE_LAYER,\n                filter: labelFilter,\n                layout: {\n                    \"text-field\": labelExpr,\n                    \"text-font\": [\"Inter Medium\", \"Arial Unicode MS Regular\"],\n                    \"text-size\": [\n                        \"interpolate\", [\"linear\"], [\"zoom\"],\n                        4, 9,\n                        6, 10.5,\n                        8, 12,\n                        10, 13\n                    ],\n                    \"text-anchor\": \"center\",\n                    \"symbol-placement\": \"point\",\n                    \"text-allow-overlap\": false\n                },\n                paint: {\n                    \"text-color\": \"#fff\",\n                    // \"text-halo-color\": \"#ffffff\",\n                    \"text-halo-width\": 1.2,\n                    \"text-halo-blur\": 0.5,\n                    \"text-opacity\": [\n                        \"interpolate\", [\"linear\"], [\"zoom\"],\n                        4, 0,      // hidden at low zooms\n                        5.5, 0.75, // fade in\n                        7, 1\n                    ]\n                },\n                minzoom: 8 // don’t clutter low zoom\n            }, \"county-boundaries\"); // keep labels above fills but below any higher-priority labels\n        }\n\n        // Attach year-toggle handlers\n        document.querySelectorAll(\"#year-controls button\").forEach(btn => {\n            btn.addEventListener(\"click\", () => updateYear(btn.dataset.year));\n        });\n\n        console.log(\"[SNAP] Map ready, initial year:\", currentYear);\n    });\n})();"]}